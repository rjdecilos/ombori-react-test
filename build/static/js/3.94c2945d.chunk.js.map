{"version":3,"sources":["../node_modules/@material-ui/core/esm/Avatar/Avatar.js","components/users/avatar.js"],"names":["Avatar_Avatar","react_default","a","forwardRef","props","ref","alt","childrenProp","children","childrenClassNameProp","childrenClassName","classes","classNameProp","className","_props$component","component","Component","imgProps","sizes","src","srcSet","other","Object","objectWithoutProperties","img","createElement","esm_extends","isValidElement","cloneElement","clsx_m","root","system","colorDefault","esm_Avatar_Avatar","withStyles","theme","position","display","alignItems","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","borderRadius","overflow","userSelect","color","palette","background","default","backgroundColor","type","grey","textAlign","objectFit","name","useStyles","makeStyles","top","AvatarItem","avatar"],"mappings":"wJAwCIA,EAASC,EAAAC,EAAKC,WAAA,SAAAC,EAAAC,GAClB,IAAAC,EAAAF,EAAAE,IACAC,EAAAH,EAAAI,SACAC,EAAAL,EAAAM,kBACAC,EAAAP,EAAAO,QACAC,EAAAR,EAAAS,UACAC,EAAAV,EAAAW,UACAC,OAAA,IAAAF,EAAA,MAAAA,EACAG,EAAAb,EAAAa,SACAC,EAAAd,EAAAc,MACAC,EAAAf,EAAAe,IACAC,EAAAhB,EAAAgB,OACAC,EAAcC,OAAAC,EAAA,EAAAD,CAAwBlB,EAAA,4GAEtCI,EAAA,KACAgB,EAAAL,GAAAC,EAkBA,OAfAZ,EADAgB,EACevB,EAAAC,EAAKuB,cAAA,MAAsBH,OAAAI,EAAA,EAAAJ,CAAQ,CAClDhB,MACAa,MACAC,SACAF,QACAL,UAAAF,EAAAa,KACKP,IACFR,GAAmCR,EAAAC,EAAKyB,eAAApB,GAC5BN,EAAAC,EAAK0B,aAAArB,EAAA,CACpBM,UAAiBS,OAAAO,EAAA,EAAAP,CAAIb,EAAAF,EAAAH,MAAAS,aAGrBN,EAGSN,EAAAC,EAAKuB,cAAAT,EAA0BM,OAAAI,EAAA,EAAAJ,CAAQ,CAChDT,UAAeS,OAAAO,EAAA,EAAAP,CAAIX,EAAAmB,KAAAnB,EAAAoB,OAAAnB,GAAAY,GAAAb,EAAAqB,cACnB3B,OACGgB,GAAAb,KA+DYyB,EAAAX,OAAAY,EAAA,EAAAZ,CArIR,SAAAa,GACP,OAEAL,KAAA,CACAM,SAAA,WACAC,QAAA,OACAC,WAAA,SACAC,eAAA,SACAC,WAAA,EACAC,MAAA,GACAC,OAAA,GACAC,WAAAR,EAAAS,WAAAD,WACAE,SAAAV,EAAAS,WAAAE,QAAA,IACAC,aAAA,MACAC,SAAA,SACAC,WAAA,QAIAjB,aAAA,CACAkB,MAAAf,EAAAgB,QAAAC,WAAAC,QACAC,gBAAA,UAAAnB,EAAAgB,QAAAI,KAAApB,EAAAgB,QAAAK,KAAA,KAAArB,EAAAgB,QAAAK,KAAA,MAIAhC,IAAA,CACAiB,MAAA,OACAC,OAAA,OACAe,UAAA,SAEAC,UAAA,WAuGyB,CACzBC,KAAA,aADe,CAEZ3D,YCzIG4D,EAAYC,YAAW,SAAA1B,GAAK,MAAK,CACnCL,KAAM,CACFgC,IAAK,sBASEC,UALI,SAAC3D,GAChB,IAAMO,EAAUiD,IAChB,OAAO3D,EAAAC,EAAAuB,cAACQ,EAAD,CAAQpB,UAAWF,EAAQmB,KAAMxB,IAAI,aAAaa,IAAKf,EAAM4D","file":"static/js/3.94c2945d.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover'\n    }\n  };\n};\nvar Avatar = React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      childrenClassNameProp = props.childrenClassName,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"childrenClassName\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\"]);\n\n  var children = null;\n  var img = src || srcSet;\n\n  if (img) {\n    children = React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenClassNameProp && React.isValidElement(childrenProp)) {\n    children = React.cloneElement(childrenProp, {\n      className: clsx(childrenClassNameProp, childrenProp.props.className)\n    });\n  } else {\n    children = childrenProp;\n  }\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar.\n   * `src` and `alt` props will not be used and no `img` will\n   * be rendered by default.\n   *\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   * The className of the child element.\n   * Used by Chip and ListItemIcon to style the Avatar icon.\n   */\n  childrenClassName: PropTypes.string,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component\n   * is used to display an image.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   */\n  srcSet: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        top: '30px !important',\r\n    }\r\n}));\r\n\r\nconst AvatarItem = (props) => {\r\n    const classes = useStyles();\r\n    return <Avatar className={classes.root} alt=\"Remy Sharp\" src={props.avatar} />\r\n}\r\n\r\nexport default AvatarItem;"],"sourceRoot":""}